To deploy the code in a cloud service for example AWS, I would use AWS lambda to run the data processing, S3 bucket to hold the preproccessed and processed data and Amazon CloudWatch to monitor the execution (log errors and track performance metrics). Assuming. Firstly, Country-Code.xlsx file is uploaded to an S3 bucket called "raw_data". Assuming that the Json file is updated continously, a simple AWS lambda function called "data_ingestion" is triggered that pulls the json file using the json url and stores it into the "raw data" S3 bucket. If Steven wants the data to be updated frequently, the lambda function has a set timer to run. Else if he wants to manage when the data is updated, the lambda function would be manually triggered. Whenenver the "raw_data" bucket is updated, it triggers another lambda function called "data_processor" to process the raw data. This serverless approach eliminates the need to run the second lambda function manually. The "data_processor" lambda function pulls the raw data from the "raw_data" buckets and process the data, handling the ETL pipiline. Once the lambda finished running, the processed data is stored in an S3 bucket called "processed_data". The access control to this bucket would be limited to read-only to prevent any unintended changes to the data. Although the data is not sensitive, both S3 buckets should be server-side encrypted to follow best practice. Input raw data is stored in the S3 Standard storage class for frequent access whereas processed data is stored in the Standard-IA or Glacier dependent on how the desired retreival time. Both Lambda functions' memory and timeout settings is optimized to ensure it runs efficiently while ensuring lowest cost. Cloudwatch monitors and elimate any inefficiencies. To test the process, sample data could be uploaded to the "raw_data" bucket and cross checked for mistakes. Specifically, edge cases should be prioritised in the testing to expose any flaws in the cloud design and python scripts. This cloud-based solution ensures scalable, security and serverless to process the raw data, creating a robost and coest effective system.